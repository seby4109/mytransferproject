import numpy as np
import pandas as pd

from src.engine import eir_cash_flow_schedule
from src.engine.events.event import Event


class NewAndCommission(Event):
    def __init__(
        self,
        parameters_const,
        cash_flow_date,
        payment_schedule_for_init,
        nominal_interest_for_init,
    ):

        super().__init__(
            parameters_const,
            cash_flow_date,
            payment_schedule_for_init,
            nominal_interest_for_init,
        )

    def calculate(self, eir_effective):
        """
        Calculates values for new row of eir_effective

        Args:
            eir_effective (dataframe): most recent table of eir_effective
        """

        self._eir_effective = eir_effective

        self._notional_due = self._exp_info.loc[
            len(self._exp_info) - 1, "OpenValue"
        ]

        self._repayment_capital = -self._notional_due

        # = value of commision for this cash flow date from _eir_commissions
        self._comm_value = self._commissions.loc[
            self._commissions["CollectionDate"] == self._cash_flow_date,
            "CommValue",
        ].sum()
        """
        if self._comm_value.empty:
            self._comm_value = 0
        else:
            self._comm_value = self._comm_value.item()
        """
        self._effective_notional_due = self._notional_due - self._comm_value

        self._unsettled_commission_balance_effective = self._comm_value

        self._unsettled_commission_balance_effective = self._comm_value

    def create_new_row(self):
        """
        Creates new row of eir_effective and returns it as dataframe

        Returns:
            dataframe: new row of eir_effective, generated by event
        """

        row = pd.DataFrame(
            {
                "BusinessDate": self._business_date,
                "EirExposureMapId": self._rrc_exp_id,
                "CashFlowDate": self._cash_flow_date,
                "NotionalDue": self._notional_due,
                "RepaymentCapital": self._repayment_capital,
                "RepaymentInterest": self._repayment_interest,
                "RepaymentAccruedInterest": self._repayment_accrued_interest,
                "CommValue": self._comm_value,
                "AmortizationResultsEffective": self._amortization_results_effective,
                "UnsettledCommissionBalanceEffective": self._unsettled_commission_balance_effective,
                "EffectiveInterest": self._effective_interest,
                "EffectiveNotionalDue": self._effective_notional_due,
                "EffectiveInterestRate": 0,
            },
            index=[0],
        )

        cash_flow_schedule = eir_cash_flow_schedule.Eir_cash_flow_schedule(
            row, self._payment_schedule
        )

        row["EffectiveInterestRate"] = cash_flow_schedule.eir

        return row
